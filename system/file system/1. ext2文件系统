### 总体布局
总体而言，一块磁盘可以被划分成多个分区，而每个分区都能被格式化工具（如mkfs）格式化为具体的文件系统，格式化工具会在该分区中写入一些管理存储布局的信息，然后该分区才能开始存储文件。ext2文件系统的布局如下图所示：

          +---------------|---------------|--------------|---------------+
          |               |               |              |               |
          |  boot block   | block group 0 |    ......    | block group N |
          |               |               |              |               |
          +---------------|---------------|--------------|---------------+
                          |               |                               
                          |               |                               
                          |               |                               
--------------------------+               +--------------------------|    
|                                                                    |    
|                                                                    |    
v----------|------------|----------|-----------|----------|----------v    
|  super   | group      |  block   |   inode   |  inode   |   data   |    
|          | descriptor |          |           |          |          |    
|  block   | table      |  bitmap  |   bitmap  |  table   |  blocks  |    
+----------|------------|----------|-----------|----------|----------+

文件系统中最小单位是块（block），块大小在格式化时就需要被指定。常见大小有1K、4K等。而上图中的启动块（boot block）则是PC标准规定的，固定位1K，主要是用来存储磁盘分区信息和启动信息，任何文件系统都不允许使用启动块。启动块之后才是ext2文件系统的本体，ext2文件系统将整个分区划分成若干个同样大小的块组（block group），每个块组都是由以下部分组成：
- 超级快（super block）：描述整个分区的信息，如块大小、文件系统版本号、mount时间等。
- 块组描述符表（GDT）：由很多块组描述符组成，每个块组描述符存储一个块组的描述信息，如inode表的开始位置、数据块的开始位置、空闲的inode和数据块数目等。注意块组描述符表在每个块组开头都有一个拷贝，通常内核仅使用第0个块组中的拷贝。当执行e2fsck检查文件系统一致性时，第0个块组中的超级块和块组描述符表都会被拷贝至其他块组，这样当第0个块组开头意外损坏时，可以使用其他拷贝来修复。
- 块位图（block bitmap）：因为底层文件系统都是按块来存储文件，块位图就是用来表示整个块组中哪些块已经被使用，哪些块还处于空闲状态。注意块位图本身只占用一个块，其中的每个bit都描述本块组中的一个块，1就表示已被使用，0则表示该块空闲。
	- 由于块位图仅占用一个块，因此当块大小确定后，块组的数量也就能够被计算出来：磁盘大小/(块大小*8)。
	- 当使用df命令统计磁盘已用空间非常快，因为它就是统计块位图的使用情况；而使用du则比较慢，因为它需要遍历整个目录的所有文件。
- inode位图（inode bitmap）：与块位图类似，但是inode位图是用来表示inode是否可用。
- inode表（inode table）：文件除了本身的数据需要存储之外，还需要存储文件描述相关的信息，如文件类型、权限、文件大小、时间相关等信息，通过ls -l就能够查看文件的这类信息。文件的描述信息并非存储在数据块中，而是存储在inode中，也即每个文件都会有一个inode，而一个块组中所有的inode就组成了inode表。
	- inode表占用块的数目需要在格式化时指定。e2fsck默认策略是每8KB就分配一个inode。也即，当文件大小为8KB左右时，能够充分利用整个分区。太大或太小都无法充分利用。
- 数据块（data blocks）：数据块中存储的内容主要有一下几类：
	- 常规文件：文件数据存储在数据块中
	- 目录：该目录下所有的文件名和目录名都存储在数据块中，目录其实也是一种特殊的文件。需要注意的是，除了文件名，其他信息都保存在该文件的inode中。
	- 符号链接：如果目标路径名较短，则直接存储在inode中，以便快速查找，否则就分配一个数据块来存储路径名。
	- 设备文件、FIFO及socket等特殊文件：没有数据块，设备文件的主设备号和次设备号都存储在inode中。

